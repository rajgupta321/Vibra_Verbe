import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5.h),
          ),
          shadowColor: appTheme.lightBlueA200.withOpacity(0.24),
          elevation: 10,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray90001,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blue50,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray40004,
          fontSize: 17.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray90001,
          fontSize: 14.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray300,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 50.fSize,
          fontFamily: 'Philosopher',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 32.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 26.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 24.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.blueGray300,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 10.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 20.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w900,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF1E6474),
    primaryContainer: Color(0XFF161616),

    // Error colors
    errorContainer: Color(0XFF434343),
    onError: Color(0XFFFF5500),
    onErrorContainer: Color(0X87FFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFF0F0F0F),
    onPrimaryContainer: Color(0XFFFB7181),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber400 => Color(0XFFFFC120);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue50 => Color(0XFFEAEFFF);

  // BlueGray
  Color get blueGray100 => Color(0XFFD0D0D0);
  Color get blueGray10001 => Color(0XFFCFCFCF);
  Color get blueGray300 => Color(0XFF9098B1);
  Color get blueGray400 => Color(0XFF8A8A8E);
  Color get blueGray40001 => Color(0XFF8E8E93);
  Color get blueGray40002 => Color(0XFF838589);
  Color get blueGray900 => Color(0XFF22292E);

  // DeepOrange
  Color get deepOrange300 => Color(0XFFF89170);

  // Gray
  Color get gray100 => Color(0XFFF3F4F5);
  Color get gray10001 => Color(0XFFF4F4F6);
  Color get gray10002 => Color(0XFFEEFAF6);
  Color get gray10003 => Color(0XFFF5F5F7);
  Color get gray200 => Color(0XFFEDEDED);
  Color get gray20001 => Color(0XFFE8E8E8);
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray40001 => Color(0XFFC4C5C4);
  Color get gray40002 => Color(0XFFB8B8B8);
  Color get gray40003 => Color(0XFFB9B9BB);
  Color get gray40004 => Color(0XFFC5C5C7);
  Color get gray50 => Color(0XFFFAFAFA);
  Color get gray500 => Color(0XFFABABAB);
  Color get gray50001 => Color(0XFFA5A5A5);
  Color get gray50002 => Color(0XFF938E8E);
  Color get gray800 => Color(0XFF343A40);
  Color get gray900 => Color(0XFF2A2A2A);
  Color get gray90001 => Color(0XFF0C1A30);
  Color get gray90002 => Color(0XFF1C1C1C);

  // Grayf
  Color get gray4007f => Color(0X7FC7C4C4);

  // Indigo
  Color get indigo500 => Color(0XFF3669C9);
  Color get indigo900 => Color(0XFF223263);
  Color get indigoA200 => Color(0XFF5B61F4);
  Color get indigoA20001 => Color(0XFF5859F3);

  // LightBlue
  Color get lightBlueA200 => Color(0XFF40BFFF);

  // Orange
  Color get orange400 => Color(0XFFFFA41D);

  // Pink
  Color get pinkA700 => Color(0XFFCF0090);

  // Purple
  Color get purple900 => Color(0XFF4D0A8E);

  // Red
  Color get red400 => Color(0XFFE85C4D);
  Color get red500 => Color(0XFFFF4242);
  Color get red50001 => Color(0XFFFE3A30);
  Color get redA700 => Color(0XFFFF0707);

  // RedAc
  Color get redA4000c => Color(0X0CFF033F);

  // Teal
  Color get teal400 => Color(0XFF3A9B7A);

  // White
  Color get whiteA700 => Color(0XFFFEFDFF);

  // Yellow
  Color get yellow800 => Color(0XFFEBA827);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
